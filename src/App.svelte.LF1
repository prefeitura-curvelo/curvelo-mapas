// App.svelte
<script>
  import { onMount } from 'svelte';
  import L from 'leaflet';
  import 'leaflet.markercluster';
  import 'leaflet/dist/leaflet.css';
  import 'leaflet.markercluster/dist/MarkerCluster.css';
  import 'leaflet.markercluster/dist/MarkerCluster.Default.css';
  
  const layerConfig = [
    {
      id: 'layer8',
      name: 'Macrozoneamento',
      url: 'https://curvelo.vaz.io/dataset/716c0bf0-6b54-4b8a-b07f-79985cf672e6/resource/d6609383-4485-4a3d-8ba5-a9cde647e02c/download/macrozoneamento.geojson',
      style: {
         fill: 'rgba(200, 200, 0, 0.2)',
         stroke: '#AAAA00',
         strokeWidth: 2,
         pointRadius: 5,
         pointFill: '#00ffff'
      }
    },


    {
      id: 'layer3',
      name: 'Perímetro Rural',
      url: 'https://curvelo.vaz.io/dataset/31bbb8a5-eaad-4952-802f-267d898224f0/resource/ab706115-d919-4323-bc96-8f39632d2ad1/download/perimetro_rural.geojson',
      style: {
         fill: 'rgba(0, 200, 0, 0.4)',
         stroke: '#00ff00',
         strokeWidth: 2,
         pointRadius: 5,
         pointFill: '#ff0000'
      }
    },
    {
      id: 'layer4',
      name: 'Limite Urbano',
      url: 'https://curvelo.vaz.io/dataset/ce0b8798-bc4c-4d5e-b87c-6a4c46dbb92f/resource/bbcfba99-aabf-453b-96bc-416f39f0f90b/download/limite_perurbano.geojson',
      style: {
         fill: 'rgba(0, 200, 200, 0.4)',
         stroke: '#00ff00',
         strokeWidth: 2,
         pointRadius: 5,
         pointFill: '#00DDDD'
      }
    },
    {
      id: 'layer9',
      name: 'Lote',
      url: 'https://curvelo.vaz.io/dataset/fea1bfd1-2125-4c97-995d-851aac5f2546/resource/016bd908-fdf0-4c4e-b476-9d4d2aaf310a/download/lote_08_2024.geojson',
      style: {
         fill: 'rgba(255, 0, 255, 0.2)',
         stroke: '#ff00ff',
         strokeWidth: 1,
         pointRadius: 5,
         pointFill: '#ff0000'
      }
    },
    {
      id: 'layer10',
      name: 'Hidro Curvelo',
      url: 'https://curvelo.vaz.io/dataset/33db52bf-c019-48c6-a285-e145bf24936d/resource/0711f0ea-2ae9-4518-bdd5-358b037da184/download/hidro_curvelo.geojson',
      style: {
         fill: 'rgba(0, 100, 255, 0.4)',
         stroke: '#0088FF',
         strokeWidth: 2,
         pointRadius: 5,
         pointFill: '#00DDDD'
      }
    },
    {
      id: 'layer11',
      name: 'Pontos de Iluminação',
      url: 'https://curvelo.vaz.io/dataset/8749164d-a544-4e00-ae7f-cc5a00069800/resource/180a115c-f0ab-47bd-8896-5952a96da00f/download/pontos_iluminacao.geojson',
      style: {
         fill: 'rgba(100, 100, 255, 0.4)',
         stroke: '#8888FF',
         strokeWidth: 2,
         pointRadius: 2,
         pointFill: '#00DDDD'
      }
    },
    {
      id: 'layer1',
      name: 'Imóveis',
      url: 'https://curvelo.vaz.io/dataset/c5be57f5-053b-4f40-bff1-9ce58fac0c75/resource/4301a430-0d1d-4daf-8086-f26239333faf/download/imoveis.geojson',
      style: {
         fill: 'rgba(255, 0, 0, 0.2)',
         stroke: '#ff0000',
         strokeWidth: 2,
         pointRadius: 5,
         pointFill: '#ff0000'
      }
    },
    {
      id: 'layer2',
      name: 'Logradouros',
      url: 'https://curvelo.vaz.io/dataset/0f68f155-2cfb-4862-b31a-f21445ff9a61/resource/501540e5-90b4-434e-80a7-a4d3b7d114da/download/logradouros_08_2024.geojson',
      style: {
         fill: 'rgba(0, 0, 255, 0.2)',
         stroke: '#0000FF',
         strokeWidth: 2,
         pointRadius: 5,
         pointFill: '#0000ff'
      }
    },
    {
      id: 'layer6',
      name: 'Hierarquia Viária PD',
      url: 'https://curvelo.vaz.io/dataset/4f551b93-dd8c-47b0-8074-24f33e9a4d53/resource/860b5acf-48c4-461c-a6cc-ebe71d849686/download/hierarquia_viaria_pd.geojson',
      style: {
         fill: 'rgba(0, 255, 255, 0.2)',
         stroke: '#00FFFF',
         strokeWidth: 2,
         pointRadius: 5,
         pointFill: '#00ffff'
      }
    },
    {
      id: 'layer7',
      name: 'Edificações',
      url: 'https://curvelo.vaz.io/dataset/3b9826eb-1436-438f-9b09-d8809fb981c3/resource/79b14382-c5c2-4fcf-850d-e26b3dc31742/download/edificacoes.geojson',
      style: {
         fill: 'rgba(0, 255, 255, 0.2)',
         stroke: '#FFAA00',
         strokeWidth: 2,
         pointRadius: 5,
         pointFill: '#00ffff'
      }
    },


    {
      id: 'layer5',
      name: 'Inscrições cadastrais',
      url: 'https://curvelo.vaz.io/dataset/916257e3-647a-46b7-9a89-d08560d4b3fe/resource/f8c2e275-f9bf-435e-9f1b-9c51c1294776/download/inscricoes_cadastrais_08_2024.geojson',
      style: {
         fill: 'rgba(0, 0, 255, 0.2)',
         stroke: '#0000FF',
         strokeWidth: 2,
         pointRadius: 5,
         pointFill: '#0000ff'
      }
    },


  ];

  let map;
  let layers = new Map();
  let selectedLayers = new Set();
  let loadingStates = new Map();  // Track loading state for each layer
  let isMenuCollapsed = false;

  onMount(() => {
    map = L.map('map').setView([-18.7587401,-44.46470720], 12);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '© OpenStreetMap contributors'
    }).addTo(map);
  });

  async function loadLayer(config) {
    try {
      // Set loading state
      loadingStates.set(config.id, 'loading');
      loadingStates = loadingStates;

      // Create marker cluster group
      const markerCluster = L.markerClusterGroup({
        chunkedLoading: true,
        maxClusterRadius: 50,
        spiderfyOnMaxZoom: false,
        disableClusteringAtZoom: 16,
        chunkInterval: 200,
        chunkDelay: 50
      });

      // Fetch GeoJSON data
      const response = await fetch(config.url);
      const data = await response.json();

      // Process features in chunks
      const features = data.features;
      const chunkSize = 1000;
      let currentIndex = 0;

      function processChunk() {
        const chunk = features.slice(
          currentIndex,
          currentIndex + chunkSize
        );

        chunk.forEach(feature => {
          const marker = L.circleMarker(
            [
              feature.geometry.coordinates[1],
              feature.geometry.coordinates[0]
            ],
            {
              radius: 4,
              fillColor: '#ff0000',
              color: '#000',
              weight: 1,
              opacity: 1,
              fillOpacity: 0.5
            }
          );
          
          // Add popup with properties
          marker.bindPopup(() => {
            const props = feature.properties;
            return Object.entries(props)
              .map(([key, value]) => `<strong>${key}:</strong> ${value}`)
              .join('<br>');
          });

          markerCluster.addLayer(marker);
        });

        currentIndex += chunkSize;

        if (currentIndex < features.length) {
          setTimeout(processChunk, 10);
          // Update loading progress
          const progress = Math.round((currentIndex / features.length) * 100);
          loadingStates.set(config.id, `loading ${progress}%`);
          loadingStates = loadingStates;
        } else {
          // Loading complete
          loadingStates.set(config.id, 'loaded');
          loadingStates = loadingStates;
        }
      }

      processChunk();
      return markerCluster;

    } catch (error) {
      console.error(`Error loading layer ${config.id}:`, error);
      loadingStates.set(config.id, 'error');
      loadingStates = loadingStates;
      throw error;
    }
  }

  async function toggleLayer(config) {
    try {
      if (selectedLayers.has(config.id)) {
        // Remove layer
        const layer = layers.get(config.id);
        if (layer) {
          map.removeLayer(layer);
        }
        selectedLayers.delete(config.id);
        selectedLayers = selectedLayers;
      } else {
        // Load and add layer
        let layer = layers.get(config.id);
        
        if (!layer) {
          // Only load if not already loaded
          layer = await loadLayer(config);
          layers.set(config.id, layer);
        }
        
        map.addLayer(layer);
        selectedLayers.add(config.id);
        selectedLayers = selectedLayers;
      }
    } catch (error) {
      console.error(`Error toggling layer ${config.id}:`, error);
    }
  }

  function toggleMenu() {
    isMenuCollapsed = !isMenuCollapsed;
  }
</script>

<style>
  :global(html, body) {
    margin: 0;
    height: 100%;
  }
  
  .container {
    display: flex;
    height: 100vh;
  }
  
  .menu {
    background-color: #f8f9fa;
    box-shadow: 2px 0 5px rgba(0,0,0,0.1);
    z-index: 1000;
    display: flex;
    transition: all 0.3s ease;
    position: relative;
  }

  .menu.expanded {
    width: 250px;
  }

  .menu.collapsed {
    width: 40px;
  }

  .menu-content {
    width: 250px;
    padding: 1rem;
    overflow: hidden;
    transition: all 0.3s ease;
    transform-origin: left;
  }

  .menu.collapsed .menu-content {
    transform: translateX(-210px);
  }

  .toggle-button {
    position: absolute;
    right: -12px;
    top: 50%;
    transform: translateY(-50%);
    width: 24px;
    height: 24px;
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1001;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    transition: transform 0.3s ease;
  }

  .menu.collapsed .toggle-button {
    transform: translateY(-50%) rotate(180deg);
  }

  .toggle-icon {
    border: solid #666;
    border-width: 0 2px 2px 0;
    display: inline-block;
    padding: 3px;
    transform: rotate(135deg);
    margin-left: 3px;
  }
  
  .map-container {
    flex-grow: 1;
  }
  
  #map {
    width: 100%;
    height: 100%;
  }

  .layer-item {
    display: flex;
    align-items: center;
    padding: 0.5rem;
    margin-bottom: 0.5rem;
    background-color: white;
    border-radius: 4px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  }

  .layer-info {
    margin-left: 0.5rem;
    flex-grow: 1;
  }

  .layer-name {
    font-weight: 500;
  }

  .layer-status {
    font-size: 0.8rem;
    color: #666;
  }

  .loading {
    color: #2196F3;
  }

  .error {
    color: #f44336;
  }

  .loaded {
    color: #4CAF50;
  }

  .checkbox {
    margin-right: 0.5rem;
  }
</style>

<div class="container">
  <div class="menu {isMenuCollapsed ? 'collapsed' : 'expanded'}">
    <div class="menu-content">
      <h2>Layers</h2>
      {#each layerConfig as layer}
        <div class="layer-item">
          <input
            type="checkbox"
            class="checkbox"
            checked={selectedLayers.has(layer.id)}
            on:change={() => toggleLayer(layer)}
          />
          <div class="layer-info">
            <div class="layer-name">{layer.name}</div>
            {#if loadingStates.get(layer.id)}
              <div class="layer-status {loadingStates.get(layer.id).split(' ')[0]}">
                {loadingStates.get(layer.id)}
              </div>
            {/if}
          </div>
        </div>
      {/each}
    </div>
    <button class="toggle-button" on:click={toggleMenu}>
      <span class="toggle-icon"></span>
    </button>
  </div>
  
  <div class="map-container">
    <div id="map"></div>
  </div>
</div>
